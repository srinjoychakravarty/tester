f get_active_session_dicts()
{
    active_session_dict = {}
	users = []
	user_slices = `ls /sys/fs/cgroup/cpu/user.slice/` 
	usr_list = user_slices.lines()
	num_users = usr_list.len()
	base_path = "/sys/fs/cgroup/cpu/user.slice/"
	for i = 0; i < num_users; i = i + 1
	{
		usr_str = usr_list[i]
		if ("user" in usr_str) 
		{
			target = base_path+usr_str
			current_path = cd(target)
			temp_dict = {}
			wall_clock = `date +%s%N`
			temp_dict['wall_clock'] = int(wall_clock)	 
			cpu_clock_str = `cat $target/cpuacct.usage`
            temp_dict['cpu_clock'] = int(cpu_clock_str)  
			active_session_dict[usr_str] = temp_dict   
		}
	}
	return active_session_dict
}

loop_cadence = int(arg(2))
email_threshold = int(arg(3))
overusage_parameter = int(arg(4))
echo("Loop Cadence: $loop_cadence")
echo("Email Threshold: $email_threshold")
echo("Overusage Parameter: $overusage_parameter")

prev_round_dict = {}
current_round_dict = {}

x = 0
echo("x = $x")

while x < 2 
{
    active_session_dict = get_active_session_dicts()
    active_keys = active_session_dict.keys()
    # echo("Printing Active Session Dictionary...\n") 
    # echo("$active_session_dict")                             
    num_active_keys = active_keys.len()
    echo("Number of Active Keys: $num_active_keys")
    if num_active_keys > 0                                               
    {
        old_keys = (prev_round_dict.keys()).diff(active_keys)
        type_old_keys = type(old_keys)
        echo("Old Keys: $old_keys") 
        echo('Type of old_keys: $type_old_keys') 
        num_old_keys = old_keys.len()
        echo("Old Keys First Count: $num_old_keys")
        old_keys[0] = 1
        old_keys[1] = 2 
        new_num_old_keys = old_keys.len()
        echo("Old Keys Second Count: $new_num_old_keys")
        if (new_num_old_keys > 0)                                            
        {
            echo("I am inside the if old keys loop")
            for x in old_keys:                                     
            {
                echo("Current Old Key: $old_key")  
                #active_session_dict.pop(old_key)
            }
        }
        else
        {
            echo("I am inside the else not old keys loop")
            # remaining_keys = active_session_dict.keys()                              
        
            # for key in remaining_keys                                               
            # {
            #     start_usr_dict = prev_round_dict[key]
            #     begin_wall_clock = start_usr_dict['wall_clock']
            #     begin_cpu_clock = start_usr_dict['cpu_clock']
    
            #     finish_usr_dict = active_session_dict[key]                          
            #     stop_wall_clock = finish_usr_dict['wall_clock']
            #     stop_cpu_clock = finish_usr_dict['cpu_clock']

            #     cpu_duration = stop_cpu_clock - begin_cpu_clock 
            #     wall_clock_duration = stop_wall_clock - begin_wall_clock
            #     cpu_usage_pct = ((cpu_duration / wall_clock_duration) * 100).round(3) 

            #     tmp_usr_dict = {}
            #     tmp_usr_dict['wall_clock'] = stop_wall_clock
            #     tmp_usr_dict['cpu_clock'] = stop_cpu_clock

            #     if (cpu_usage_pct > overusage_parameter)
            #     {
            #         tmp_usr_dict['cpu_usage'] = cpu_usage_pct
            #         tmp_usr_dict['consecutive_overusage'] += 1
            #     }
                
            #     current_round_dict[key] = tmp_usr_dict
            # }

            # echo(current_round_dict)
            # prev_round_dict = current_round_dict

        }
    }
    
    x += 1
    echo("Sleeping for $loop_cadence seconds...")
    sleep(loop_cadence*1000)
    echo("I ‚ù§ Northeastern")
}

